-- naive pretty printer library

data Doc = NIL
		|  TEXT String Doc
		|  LINE Int Doc
;

let nil = NIL
;

let rec (<>) (x: Doc) (y: Doc) : Doc=
	case x of
			TEXT s d 	-> TEXT s (d <> y)
		|	LINE i e	-> LINE i (e <> y)		
		|	NIL 		-> y
;

let rec nest (i: Int) (x: Doc): Doc=
	case x of
			TEXT s d 	-> TEXT s (nest i d)
		|	LINE j c 	-> LINE (i+j) (nest i c)
		|	NIL 		-> NIL
;

let text (s: String): Doc=
	TEXT s NIL
;

let line: Doc= 
	LINE 0 NIL
;

let concat (x : String) (y : String): String= 
	x.concat(y)
;

let rec space (i: Int): String=
	if i==0 then
				""
			 else
			 	" ".concat(space (i-1))
;

let rec showDoc(doc: Doc): String=
	case doc of
			TEXT s x	-> concat s (showDoc x)
		|	LINE i d 	-> concat (concat "\n" (space i)) (showDoc d)
		| 	NIL			-> ""
;


-- Naive XML definition (from elton)

data PList[A] = Nil
              | Cons A (PList[A])
;

let (+>)[A] (a: A)(l: PList[A]): PList[A]=
	Cons[A] a l
;

data XMLNode = XMLText      String
             | XMLAttr      String String
             | XMLElement   String PList[XMLNode] PList[XMLNode]
             | XMLCData		String
             | XMLComment	String
             | XMLProcInst	String PList[XMLNode]
;

-- XML to document

let quoted (s: String): String=
	"\"".concat(s.concat("\""))
;
let rec showXML (xml: XMLNode): Doc=
	case xml of
			XMLText s 						-> text s
		|	XMLCData s 						-> text "<![CDATA[" <> text s <> text "]]>"
		|	XMLComment s					-> text "<--" <> text s <> text "-->"
		|	XMLProcInst s x					-> text "<?" <> text s <>showATTs x <> text "?>" 
		|	XMLAttr x y 					-> text " " <> text x <> text "=" <> text (quoted y) 
		|	XMLElement s x y				-> text "<" <> text s <> showATTs x <> text ">" <>
												(nest 2 (line <> showXMLs y)) <>
												line <> text "</" <> text s <> text ">"
and
showATTs (xmls: PList[XMLNode]): Doc=
	case xmls of
			Nil								-> NIL
		|	Cons x xs 						-> showXML x <> showXMLs xs	 
and
showXMLs (xmls: PList[XMLNode]): Doc=
	case xmls of
			Nil								-> NIL
		|	Cons x xs 						-> 
		{
			case xs of
					Nil 						-> showXML x
				|	Cons y ys					-> showXML x <> line <> showXMLs (y +> ys)
		}
;


-- Test 

let xml= 	Cons[XMLNode]
			(XMLProcInst "xml" 
			 (
			 	Cons[XMLNode] (XMLAttr "version" "1.0") (Cons[XMLNode] (XMLAttr "encoding" "UTF-8") (Nil[XMLNode]))
			 )
			) 
			(Cons[XMLNode]
			(	XMLElement "p" 
				(Cons[XMLNode] (XMLAttr "color" "red") (Cons[XMLNode] (XMLAttr "name" "xiafan") (Nil[XMLNode]))) 
				(Cons[XMLNode] (XMLElement "h1" (Cons[XMLNode] (XMLAttr "defalt" "true") (Nil[XMLNode])) (Cons[XMLNode] (XMLText "Small Step") (Cons[XMLNode] (XMLCData "<function> text </function>") (Nil[XMLNode])))) (Cons[XMLNode] (XMLComment "this should be ignored") (Nil[XMLNode])))
			)
			(
				Nil[XMLNode]
			))
;
showDoc (showXMLs xml)
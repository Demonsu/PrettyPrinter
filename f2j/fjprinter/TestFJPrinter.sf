{-#
    INCLUDE "FJToDocument.sf"
    INCLUDE "TestLib.sf"
#-}



let fjexpr = FJVariable "a"
;
let fjexpr2 = FJFieldAccess fjexpr "b"
;
let fjexpr3 = FJMethodInvoke fjexpr "f" (Cons[FJExpr] fjexpr (Cons[FJExpr] fjexpr2 (Nil[FJExpr])))
;
let testFJExpr : TestFn = {
    name = "FJExpr",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJExpr fjexpr))
    }
}
;
let testFJExpr2 : TestFn = {
    name = "FJExpr",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJExpr fjexpr2))
    }
}
;
let testFJExpr3 : TestFn = {
    name = "FJExpr",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJExpr fjexpr3))
    }
}
;

let v = ("a", Just[FJExpr] (FJIntLiteral "10"))
;
let v2 = ("b", Just[FJExpr] (FJIntLiteral "20"))
;
let v3 = ("a", Nothing[FJExpr])
;
let vdef = FJVariableDef (FJType "int") (Cons[(FJIdentifier, Maybe[FJExpr])] v (Cons[(FJIdentifier, Maybe[FJExpr])] v2 (Nil[(FJIdentifier, Maybe[FJExpr])])))
;
let vdef2 = FJVariableDef (FJType "int") (Cons[(FJIdentifier, Maybe[FJExpr])] v3 (Cons[(FJIdentifier, Maybe[FJExpr])] v2 (Nil[(FJIdentifier, Maybe[FJExpr])])))
;
let fdef = FJFieldDef (FJType "int") (Cons[(FJIdentifier, Maybe[FJExpr])] v (Cons[(FJIdentifier, Maybe[FJExpr])] v2 (Nil[(FJIdentifier, Maybe[FJExpr])])))
;
let testFJFJVariableDef : TestFn = {
    name = "FJVariableDef",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJVariableDef vdef))
    }
}
;
let testFJFJVariableDef2 : TestFn = {
    name = "FJVariableDef",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJVariableDef vdef2))
    }
}
;

{-
data FJStmt = FJStmtVariableDef FJVariableDef
            | FJStmtExpr FJExpr
            | FJStmtBlock PList[FJStmt]
            | FJStmtReturn FJExpr
;
-}
let stmt = FJStmtVariableDef vdef
;
let stmt2 = FJStmtExpr fjexpr2
;
let stmt3 = FJStmtReturn fjexpr3
;
let stmts = Cons[FJStmt] stmt (Cons[FJStmt] stmt3 (Nil[FJStmt]))
;
let stmt4 = FJStmtBlock (Cons[FJStmt] stmt (Cons[FJStmt] stmt2 (Cons[FJStmt] stmt3 (Nil[FJStmt]))))
;
let testFJStmt : TestFn = {
    name = "FJStmt",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJStmt stmt4))
    }
}
;

{-
data FJMethodParamDef = FJMethodParamDef FJType FJIdentifier Maybe[FJExpr]
;
data FJMethod = FJConstructor String PList[FJMethodParamDef] PList[FJStmt]
              | FJNormalMethod String PList[FJMethodParamDef] FJType PList[FJStmt]
;
-}
let param = FJMethodParamDef (FJType "int") "a" (Nothing[FJExpr])
;
let param2 = FJMethodParamDef (FJType "int") "b" (Just[FJExpr] (FJIntLiteral "1"))
;
let method = FJConstructor "A" (Cons[FJMethodParamDef] param (Cons[FJMethodParamDef] param2 (Nil[FJMethodParamDef]))) (Nil[FJStmt])
;
let method2 = FJNormalMethod "B" (Cons[FJMethodParamDef] param (Cons[FJMethodParamDef] param2 (Nil[FJMethodParamDef]))) (FJType "string") stmts
;
let testFJMethod : TestFn = {
    name = "FJMethod",
    fn   = \(x : Unit) -> {
        println (pretty 200 (showFJMethod method))
    }
}
;
let testFJMethod2 : TestFn = {
    name = "FJMethod",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJMethod method2))
    }
}
;
{-
data rec FJClassBodyContent = FJClassMethod FJMethod
                            | FJClassField FJFieldDef
                            | FJInnerClass FJClass
and FJClass = FJClass FJType Maybe[FJType] PList[FJClassBodyContent]
;
-}
let cbc = FJClassMethod method2
;
let cbc2 = FJClassField fdef
;
let cbc3 = FJClassMethod method
;
let innerclass = FJClass (FJType "C") (Nothing[FJType]) (Cons[FJClassBodyContent] cbc2 (Cons[FJClassBodyContent] cbc3 (Cons[FJClassBodyContent] cbc (Nil[FJClassBodyContent]))))
;
let class = FJClass (FJType "A") (Just[FJType] (FJType "B")) (Cons[FJClassBodyContent] (FJInnerClass innerclass) (Cons[FJClassBodyContent] cbc2 (Cons[FJClassBodyContent] cbc3 (Cons[FJClassBodyContent] cbc (Nil[FJClassBodyContent])))))
;
let testFJClass : TestFn = {
    name = "FJClass",
    fn   = \(x : Unit) -> {
        println (pretty 20 (showFJClass class))
    }
}
;

let tests=	(testFJClass						+>[TestFn]
			(testFJMethod2						+>[TestFn]
			(testFJMethod						+>[TestFn]
			(testFJStmt							+>[TestFn]
			(testFJFJVariableDef2				+>[TestFn]
			(testFJFJVariableDef				+>[TestFn]
			(testFJExpr3						+>[TestFn]
			(testFJExpr2						+>[TestFn]
			(testFJExpr 						+>[TestFn] 
			(Nil[TestFn]))))))))))
;
runTests tests
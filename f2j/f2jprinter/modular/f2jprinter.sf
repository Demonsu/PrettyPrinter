
data Doc =	NIL
        |	TEXT String Doc
		|	LINE Int Doc
;

let nil = NIL
;

let rec (<>) (x: Doc) (y: Doc) : Doc=
	case x of
			TEXT s d 	-> TEXT s (d <> y)
		|	LINE i e	-> LINE i (e <> y)		
		|	NIL 		-> y
;

let rec nest (i: Int) (x: Doc): Doc=
	case x of
			TEXT s d 	-> TEXT s (nest i d)
		|	LINE j c 	-> LINE (i+j) (nest i c)
		|	NIL 		-> NIL
;

let text (s: String): Doc=
	TEXT s NIL
;

let line: Doc= 
	LINE 0 NIL
;

let concat (x : String) (y : String): String= 
	x.concat(y)
;

let rec space (i: Int): String=
	if i==0 then
				""
			 else
			 	" ".concat(space (i-1))
;

let rec tab (i: Int): String=
	if i==0 then
				""
			 else
			 	"\t".concat(tab (i-1))
;

let rec showDoc(doc: Doc): String=
	case doc of
			TEXT s x	-> concat s (showDoc x)
		|	LINE i d 	-> concat (concat "\n" (space i)) (showDoc d)
		| 	NIL			-> ""
;
data PList[A] = Nil
              | Cons A (PList[A])
;

let (+>)[A] (a: A)(l: PList[A]): PList[A]=
	Cons[A] a l
;


data F2JType = F2JNormalType    String PList[F2JType]
             | F2JPairedType    PList[F2JType]
             | F2JFunctionType  F2JType F2JType
;


let lengF2JType (ftype: F2JType): Int=
	case ftype of
			F2JNormalType name types -> name.length()
		|	F2JPairedType types		 -> 4
		|	F2JFunctionType t1 t2    -> 4
;


let rec showF2JType (ftype: F2JType): Doc=
	case ftype of
			F2JNormalType name params -> 
			{
				case params of
					Nil 			  -> text name
				|	Cons x xs		  -> text name <> text "[" <> (showF2JTypes (x +> xs) ",") <> text "]"
				
			}
		|	F2JPairedType types		  -> text "(" <> (showF2JTypes types ",") <> text ")"
		|	F2JFunctionType from to   -> showF2JType from <> text " -> " <> showF2JType to
and
showF2JTypes (ftypelist: PList[F2JType]) (decollator: String): Doc =
	case ftypelist of
			Nil						  -> NIL
		|	Cons x xs				  -> 
			{
				case xs of
					Nil 			  -> showF2JType x
				|	Cons y ys 		  -> showF2JType x <> (text decollator) <> (showF2JTypes (y +> ys) decollator)
			}
;


data F2JBindingParam = F2JBindingParam String F2JType
;


let rec showF2JBindingParam (fbindingparam: F2JBindingParam): Doc=
	case fbindingparam of
			F2JBindingParam name types ->
				text "(" <> text name <> text ": " <> showF2JType types <> text ")"
and showF2JBindingParams (fbindingparams: PList[F2JBindingParam]): Doc=
	case fbindingparams of
			Nil 					-> NIL
		|	Cons x xs				-> 
			{
				case xs of
					Nil 			-> showF2JBindingParam x
				|	Cons y ys		-> showF2JBindingParam x <> text " " <> showF2JBindingParams (y +> ys)
			}
;


data F2JADTAlternative = F2JADTAlternative String PList[F2JType]
;


let rec showF2JADTAlternative (f2jadtalternative: F2JADTAlternative): Doc=
	case f2jadtalternative  of
			F2JADTAlternative name types	-> text "\t" <> text name <> text " " <> (showF2JTypes types " ")

and showF2JADTAlternatives (f2jadtalternatives: PList[F2JADTAlternative]) (indent: Int): Doc=
	case f2jadtalternatives of
			Nil 					-> NIL
		|	Cons x xs				->
			{
				case xs of
					Nil 			-> showF2JADTAlternative x
				|	Cons y ys 		-> showF2JADTAlternative x <> 
										line <>	text (space indent) <> text "|" <> (showF2JADTAlternatives (y +> ys) indent)
			}
;


data F2JADTRecordItem = F2JADTRecordItem String F2JType
;


let rec showF2JADTRecordItem (f2jadtrecorditem: F2JADTRecordItem): Doc=
	case f2jadtrecorditem of
			F2JADTRecordItem name ty -> text "\t" <> text name <> text "\t\t: " <> showF2JType ty

and showF2JADTRecordItems (f2jadtrecorditems: PList[F2JADTRecordItem]): Doc=
	case f2jadtrecorditems of
			Nil 					 -> NIL
		|	Cons x xs				 -> 
			{
				case xs of
					Nil 			 -> showF2JADTRecordItem x
				|	Cons y ys		 -> showF2JADTRecordItem x <> text "," <> line <> showF2JADTRecordItems (y +> ys)
			}
;


data F2JADTBody = F2JADTNormalBody F2JType PList[F2JADTAlternative]
                | F2JADTRecordBody F2JType PList[F2JADTRecordItem]
;


let rec showF2JADTBody (f2jadtbody: F2JADTBody) (indentation: Int): Doc=
	case f2jadtbody of
			F2JADTNormalBody ftype alternatives		-> (showF2JType ftype) <> (text "= ") <> (showF2JADTAlternatives alternatives (lengF2JType(ftype) + indentation)) 
		|	F2JADTRecordBody ftype recorditems		-> (showF2JType ftype) <> (text "= {") <> line <> (showF2JADTRecordItems recorditems) <> line <> text "}" 
 
and showF2JADTBodys (f2jadtbodys: PList[F2JADTBody]) (indentation: Int): Doc=
	case f2jadtbodys of
			Nil 				-> NIL
		|	Cons x xs 			->
			{
				case xs of
					Nil 		-> showF2JADTBody x indentation
				|	Cons y ys	-> showF2JADTBody x indentation <> line <> text "and" <> line <> (showF2JADTBodys (y +> ys) indentation )
			}
;

type Show[A] = A -> Doc;


data Maybe[A] = Nothing
              | Just A
;

let showMaybe[A] (show: Show[A]) (mb: Maybe[A]): Doc=
	case mb of
			Nothing		-> NIL
		|	Just x 		-> show x
;


data rec
    F2JBindingBody = F2JLetBindingBody     String PList[F2JType] PList[F2JBindingParam] Maybe[F2JType] F2JExpr
                   | F2JLetRecBindingBody  String PList[F2JType] PList[F2JBindingParam] F2JType        F2JExpr
 
and F2JApplicationParam = F2JApplicationParamExpr F2JExpr
                        | F2JApplicationParamType PList[F2JType]

and F2JCaseAlternative = F2JCaseAlternative String PList[String] F2JExpr

and F2JRecordItem = F2JRecordItem String F2JExpr

and F2JExpr = F2JApplication        F2JExpr                  F2JApplicationParam
            | F2JLet                PList[F2JBindingBody]    F2JExpr
            | F2JLetRec             PList[F2JBindingBody]    F2JExpr
            | F2JLambda             PList[F2JBindingParam]   F2JExpr
            | F2JCase               F2JExpr                  PList[F2JCaseAlternative]
            | F2JADT                PList[F2JADTBody]        F2JExpr
            | F2JRecADT             PList[F2JADTBody]        F2JExpr
            | F2JTypeAlias          F2JType                  F2JType                     F2JExpr
            | F2JPair               PList[F2JExpr]
            | F2JIntLiteral         String
            | F2JStringLiteral      String
            | F2JVariable           String
            | F2JBlock              PList[F2JExpr]
            | F2JRecord             PList[F2JRecordItem]
; 

let max (a: Int) (b: Int) : Int=
    if (a>b) then a else b
;

let rec lengOfPListString (strs: PList[String]): Int=
    case strs of
        Cons x xs -> x.length() + 1 + lengOfPListString(xs)
    |   Nil       -> 0

;

let rec lengOfF2JCaseAlternative (ca: F2JCaseAlternative): Int=
    case ca of 
            F2JCaseAlternative dataname params expr -> (dataname.length()) + 1 + (lengOfPListString params)
    
and
lengOfF2JCaseAlternatives (cas: PList[F2JCaseAlternative]): Int=
    case cas of
            Nil         -> 0
        |   Cons x xs   -> max (lengOfF2JCaseAlternative x) (lengOfF2JCaseAlternatives xs)
;



let rec showF2JRecordItem (record: F2JRecordItem): Doc=
	line <> text "-- F2JRecordItem is TODO" <> line

and showF2JRecordItems (records: PList[F2JRecordItem]): Doc=
	line <> text "-- F2JRecordItems is TODO" <> line

;

let rec showPListString (ss: PList[String]): Doc=
	case ss of
			Nil 		-> NIL
		|	Cons x xs	-> text x <> text " " <> showPListString xs
;

let rec showF2JBindingBody (b : F2JBindingBody): Doc =
    case b of
        	F2JLetBindingBody name args params rettype expr 	->
        	{
        		case args of
        			Nil 		-> text name <> text " " <> showF2JBindingParams params <> text ": " <> showMaybe[F2JType] showF2JType rettype <> text " =" <> nest 4 (line <> (showF2JExpr expr))
        		|	Cons x xs	-> text name <> text "[" <> showF2JTypes (x +> xs) "," <> text "] " <> showF2JBindingParams params <> text ": " <> showMaybe[F2JType] showF2JType rettype <> text " =" <> nest 4 (line <> (showF2JExpr expr))
        	}

     	|  	F2JLetRecBindingBody name args params rettype expr 	->
     		{
     			case args of 
     				Nil 		-> text name <> text " " <> showF2JBindingParams params <> text ": " <> showF2JType rettype <> text " =" <> nest 4 (line <> (showF2JExpr expr))
     			| 	Cons x xs   -> text name <> text "[" <> showF2JTypes args "," <> text "] " <> showF2JBindingParams params <> text ": " <> showF2JType rettype <> text " =" <> nest 4 (line <> (showF2JExpr expr))

     		}
     		

and showF2JBindingBodys (bs: PList[F2JBindingBody]): Doc=
	case bs of
			Nil 						-> NIL
		|	Cons x xs					->
			{
				case xs of
					Nil 				-> showF2JBindingBody x
				|	Cons y ys			-> showF2JBindingBody x <> line <> text "and" <> line <> showF2JBindingBodys (y +> ys) 
			}


and showF2JApplicationParam (ap: F2JApplicationParam): Doc=
	case ap of
			F2JApplicationParamExpr expr 	->
				showF2JExpr expr
		|	F2JApplicationParamType types	->
				showF2JTypes types " "

and showF2JCaseAlternative (ca: F2JCaseAlternative) (myLen:Int) (maxLen: Int): Doc=
	case ca of
			F2JCaseAlternative dataname params expr 		->
				text "\t" <> text dataname <> text " " <> showPListString params <> text (space (maxLen - myLen + 2)) <> text "->" <> (nest 12 (line <> showF2JExpr expr)) 

and showF2JCaseAlternatives (cas: PList[F2JCaseAlternative]) (maxLen: Int): Doc=
	case cas of
			Nil 						-> NIL
		|	Cons x xs					->
			{
				case xs of
					Nil 				-> showF2JCaseAlternative x (lengOfF2JCaseAlternative x) maxLen
				|	Cons y ys 			-> (showF2JCaseAlternative x (lengOfF2JCaseAlternative x) maxLen) <> line <> text "|" <> (showF2JCaseAlternatives (y +> ys) maxLen)
			}
and showF2JExpr (expr: F2JExpr): Doc=
	case expr of
			F2JApplication f2jexpr apparm 			-> showF2JExpr f2jexpr <> showF2JApplicationParam apparm
		|	F2JLet bindingbodys f2jexpr 			-> text "let " <> showF2JBindingBodys bindingbodys <> line <> text ";" <> line <> showF2JExpr f2jexpr
		|	F2JLetRec bindingbodys f2jexpr 			-> text "let rec " <> showF2JBindingBodys bindingbodys <> line <> text ";" <> line <> showF2JExpr f2jexpr
		|	F2JLambda bindingparams f2jexpr 		-> text "\\" <> showF2JBindingParams bindingparams <> text " -> " <> showF2JExpr f2jexpr
		| 	F2JCase f2jexpr casealternatives  		-> text "case " <> showF2JExpr f2jexpr <> text " of" <> line <> (showF2JCaseAlternatives casealternatives (lengOfF2JCaseAlternatives casealternatives))
		|	F2JADT f2jadtbodys f2jexpr 				-> text "Data " <> (showF2JADTBodys f2jadtbodys 7) <> line <> text ";" <> line <> showF2JExpr f2jexpr
		| 	F2JRecADT f2jadtbodys f2jexpr 			-> text "Data rec " <> (showF2JADTBodys f2jadtbodys 11) <> line <> text ";" <> line <> showF2JExpr f2jexpr
		|	F2JTypeAlias type1 type2 f2jexpr 		-> text "type " <> showF2JType type1 <> text "= " <> showF2JType type2 <> showF2JExpr f2jexpr
		|	F2JPair exprs 							-> showF2JExprs exprs
		|	F2JIntLiteral s 						-> text s
		|	F2JStringLiteral s 						-> text s
		|	F2JVariable v 							-> text v
		|	F2JBlock exprs							-> text "{" <> line <> showF2JExprs exprs <> line <> text "}"
		|	F2JRecord recorditems 					-> showF2JRecordItems recorditems

and showF2JExprs (exprs: PList[F2JExpr]): Doc=
	case exprs of
			Nil 		-> NIL
		|	Cons x xs	-> showF2JExpr x <> showF2JExprs xs

;






let println (s : String) : Unit = { java.lang.System.out.println(s); () }
;
let print (s : String) : Unit = { java.lang.System.out.print(s); () }
;
type TestFn = {
    name : String,
    fn   : Unit -> Unit
}
;
let fool (x: Unit) (y: Unit): Unit= {
	()
}
;
let rec runTest (test : TestFn) : Unit = {
    let testingPrefix : String = "\u001b[31;1mtesting\u001b[0m\t";
    println testingPrefix.concat(test.name).concat(" :");
    test.fn ();
    println "...check it yourself"
}
and 
runTests (tests: PList[TestFn]): Unit= {
	case tests of 
			Nil 			-> ()
		|	Cons x xs		-> fool (runTest x) (runTests xs) 
}
;


let f2jtype = F2JFunctionType (
								F2JPairedType (
												Cons[F2JType] (F2JNormalType "A" (Nil[F2JType])) (
																		Cons[F2JType] (F2JNormalType "B" (Nil[F2JType])) (Nil[F2JType])
																		)
											  )
							  ) 
			  				  (
			  				  	F2JNormalType "C" (Nil[F2JType])
			  				  )	  

;
let f2jnormaltype = F2JNormalType "F2JType" (Nil[F2JType])
;
let f2jtypes = Cons[F2JType] 
				(F2JNormalType "A" (Nil[F2JType])) 
				(
					Cons[F2JType] 
					(F2JNormalType "B" (Nil[F2JType])) 
					(Nil[F2JType])
				)
;
let testF2JType : TestFn = {
    name = "F2JType",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JType f2jtype) )
    }
}
;

let fbingdingparam = F2JBindingParam "a" f2jtype
;
let fbingdingparam1 = F2JBindingParam "b" f2jtype
;
let fbingdingparam2 = F2JBindingParam "c" f2jtype
;
let fbingdingparams = Cons[F2JBindingParam] (fbingdingparam) (Cons[F2JBindingParam] (fbingdingparam1) (Cons[F2JBindingParam] (fbingdingparam2) (Nil[F2JBindingParam])))
;
let testF2JBindingParam : TestFn = {
    name = "F2JBindingParam",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingParams fbingdingparams) )
    }
}
;

let alternative1 = F2JADTAlternative 
					"F2JNormalType" 
					(
						Cons[F2JType] 
						(F2JNormalType "String" (Nil[F2JType])) 
						(
							Cons[F2JType] 
							(F2JNormalType "PList" (Cons[F2JType] (F2JNormalType "F2JType" (Nil[F2JType])) (Nil[F2JType])))
							(Nil[F2JType])  
						)
					)
;
let alternative2 = F2JADTAlternative 
					"F2JPairedType" 
					(
						Cons[F2JType] 
						(F2JNormalType "PList" (Cons[F2JType] (F2JNormalType "F2JType" (Nil[F2JType])) (Nil[F2JType])))
						(Nil[F2JType])  
					)
;
let alternative3 = F2JADTAlternative 
					"F2JFunctionType" 
					(
						Cons[F2JType] 
						(F2JNormalType "F2JType" (Nil[F2JType]) )
						(
							Cons[F2JType] 
							(F2JNormalType "F2JType" (Nil[F2JType]) )
							(
								Nil[F2JType]
							)
						)  
					)
;
let adtbody1 = F2JADTNormalBody 
				(F2JNormalType "F2JType" (Nil[F2JType])) 
				(
					Cons[F2JADTAlternative] 
						(alternative1)
						(
							Cons[F2JADTAlternative]
							(alternative2)
							(
								Cons[F2JADTAlternative]
								(alternative3)
								(Nil[F2JADTAlternative])
							)
						)  
				)
;
let testF2JADTBody1 : TestFn = {
    name = "F2JADTBody  normal",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JADTBody adtbody1 7) )
    }
}
;

let f2jlambda= F2JLambda fbingdingparams (F2JStringLiteral "1")
;
let testF2JLambda : TestFn = {
    name = "F2JLambda",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jlambda) )
    }
}
;

let recorditem1= F2JADTRecordItem "name" (F2JNormalType "Demonsu" (Nil[F2JType]))
;
let recorditem2= F2JADTRecordItem "age" (F2JNormalType "24" (Nil[F2JType]))
;
let recorditem3= F2JADTRecordItem "gender" (F2JNormalType "male" (Nil[F2JType]))
;
let adtbody2 = F2JADTRecordBody
				(F2JNormalType "F2JRecord" (Nil[F2JType]))
				(
					Cons[F2JADTRecordItem] 
						(recorditem1)
						(
							Cons[F2JADTRecordItem]
							(recorditem2)
							(
								Cons[F2JADTRecordItem]
								(recorditem3)
								(Nil[F2JADTRecordItem])
							)
						)  
				)	
;	
let testF2JADTBody2 : TestFn = {
    name = "F2JADTBody  record",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JADTBody adtbody2 7) )
    }
}
;

let maybe= Just[F2JType] f2jtype
;

let testMaybe : TestFn = {
    name = "Maybe",
    fn   = \(x : Unit) -> {
        println (showDoc (showMaybe[F2JType] showF2JType maybe) )
    }
}
;

let maybenormal= Just[F2JType] f2jnormaltype
;
let f2jbingdingbody = F2JLetBindingBody "PrintWorld" f2jtypes fbingdingparams maybenormal (F2JVariable "test")
;
let testF2JLetBindingBody : TestFn = {
    name = "F2JLetBindingBody",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingBody f2jbingdingbody) )
    }
}
;
let f2jbingdingbodyrec = F2JLetRecBindingBody "PrintWorld" f2jtypes fbingdingparams f2jnormaltype (F2JVariable "test")
;
let testF2JLetBindingBodyRec : TestFn = {
    name = "F2JLetBindingBody rec",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingBody f2jbingdingbodyrec) )
    }
}
;
let f2jexpr_f2jadt= F2JADT (Cons[F2JADTBody] adtbody1 (Cons[F2JADTBody] adtbody2 (Nil[F2JADTBody]))) (F2JVariable "test")
;
let testF2JExprF2JADT : TestFn = {
    name = "F2JExpr(F2JADT)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jadt) )
    }
}
;
let f2jexpr_f2jrecadt= F2JRecADT (Cons[F2JADTBody] adtbody1 (Cons[F2JADTBody] adtbody1 (Nil[F2JADTBody]))) (F2JVariable "test")
;
let testF2JExprF2JRecADT : TestFn = {
    name = "F2JExpr(F2JRecADT)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jrecadt) )
    }
}
;

let casealternative1= F2JCaseAlternative "F2JNormalType" (Cons[String] "s" (Cons[String] "types" (Nil[String]))) (F2JVariable "s")
;
let casealternative2= F2JCaseAlternative "F2JFunctionType" (Cons[String] "type1" (Cons[String] "type2" (Nil[String]))) (F2JStringLiteral "showF2JType type1 <> showF2JType type2")
;
let casealternative3= F2JCaseAlternative "F2JPairedType" (Cons[String] "types" (Nil[String])) (F2JStringLiteral "showF2JTypes types")
;
let casealternatives= Cons[F2JCaseAlternative] casealternative1 (Cons[F2JCaseAlternative] casealternative2 (Cons[F2JCaseAlternative] casealternative3 (Nil[F2JCaseAlternative]) ))
;
let f2jexpr_f2jcase= F2JCase (F2JVariable "x") casealternatives
;
let testF2JExprF2JCase : TestFn = {
    name = "F2JExpr(F2JCase)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jcase) )
    }
}
;
let f2jnormaltype1 = F2JNormalType "F2JType" (Nil[F2JType])
;
let f2jnormaltype2 = F2JNormalType "Doc" (Nil[F2JType])
;
let maybenormal1= Just[F2JType] f2jnormaltype2
;
let f2jbindingbody2= F2JLetBindingBody "showF2JType" (Nil[F2JType]) (Cons[F2JBindingParam] (F2JBindingParam "x" f2jnormaltype1) (Nil[F2JBindingParam]) ) maybenormal1  f2jexpr_f2jcase
;
let f2jexpr_f2jfull= F2JADT (Cons[F2JADTBody] adtbody1 (Nil[F2JADTBody])) 
					(F2JLet (Cons[F2JBindingBody] f2jbindingbody2 (Nil[F2JBindingBody])) (F2JVariable "end"))
;
let testF2JExprFull : TestFn = {
    name = "F2JExpr(Full)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jfull) )
    }
}
;

let tests=	(testF2JExprFull			+>[TestFn]
			(testF2JExprF2JCase 		+>[TestFn]
			(testF2JExprF2JRecADT		+>[TestFn]	
			(testF2JExprF2JADT 			+>[TestFn]
			(testF2JLetBindingBodyRec 	+>[TestFn]
			(testF2JLetBindingBody 		+>[TestFn]
			(testMaybe 					+>[TestFn]
			(testF2JADTBody2 			+>[TestFn]
		 	(testF2JADTBody1 			+>[TestFn]
			(testF2JBindingParam 		+>[TestFn] 
			(testF2JLambda				+>[TestFn]
			(testF2JType 				+>[TestFn] 
			(Nil[TestFn])))))))))))))
;
runTests tests


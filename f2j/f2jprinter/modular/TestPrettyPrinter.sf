{-#
    INCLUDE "F2JToDocument.sf"
    INCLUDE "TestLib.sf"
#-}


-- Test
-- (A,B) -> C
--data F2JType = F2JNormalType    String PList[F2JType]
--             | F2JPairedType    PList[F2JType]
--             | F2JFunctionType  F2JType F2JType
--;
let f2jtype = F2JFunctionType (
								F2JPairedType (
												Cons[F2JType] (F2JNormalType "A" (Nil[F2JType])) (
																		Cons[F2JType] (F2JNormalType "B" (Nil[F2JType])) (Nil[F2JType])
																		)
											  )
							  ) 
			  				  (
			  				  	F2JNormalType "C" (Nil[F2JType])
			  				  )	  

;
let f2jnormaltype = F2JNormalType "F2JType" (Nil[F2JType])
;
let f2jtypes = Cons[F2JType] 
				(F2JNormalType "A" (Nil[F2JType])) 
				(
					Cons[F2JType] 
					(F2JNormalType "B" (Nil[F2JType])) 
					(Nil[F2JType])
				)
;
let testF2JType : TestFn = {
    name = "F2JType",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JType f2jtype) )
    }
}
;

--data F2JBindingParam = F2JBindingParam String F2JType
-- a: (A,B) -> C
let fbingdingparam = F2JBindingParam "a" f2jtype
;
let fbingdingparam1 = F2JBindingParam "b" f2jtype
;
let fbingdingparam2 = F2JBindingParam "c" f2jtype
;
let fbingdingparams = Cons[F2JBindingParam] (fbingdingparam) (Cons[F2JBindingParam] (fbingdingparam1) (Cons[F2JBindingParam] (fbingdingparam2) (Nil[F2JBindingParam])))
;
let testF2JBindingParam : TestFn = {
    name = "F2JBindingParam",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingParams fbingdingparams) )
    }
}
;

--data F2JADTBody = F2JADTNormalBody F2JType PList[F2JADTAlternative]
--                | F2JADTRecordBody F2JType PList[F2JADTRecordItem]
--;
--data F2JADTAlternative = F2JADTAlternative String PList[F2JType]
let alternative1 = F2JADTAlternative 
					"F2JNormalType" 
					(
						Cons[F2JType] 
						(F2JNormalType "String" (Nil[F2JType])) 
						(
							Cons[F2JType] 
							(F2JNormalType "PList" (Cons[F2JType] (F2JNormalType "F2JType" (Nil[F2JType])) (Nil[F2JType])))
							(Nil[F2JType])  
						)
					)
;
let alternative2 = F2JADTAlternative 
					"F2JPairedType" 
					(
						Cons[F2JType] 
						(F2JNormalType "PList" (Cons[F2JType] (F2JNormalType "F2JType" (Nil[F2JType])) (Nil[F2JType])))
						(Nil[F2JType])  
					)
;
let alternative3 = F2JADTAlternative 
					"F2JFunctionType" 
					(
						Cons[F2JType] 
						(F2JNormalType "F2JType" (Nil[F2JType]) )
						(
							Cons[F2JType] 
							(F2JNormalType "F2JType" (Nil[F2JType]) )
							(
								Nil[F2JType]
							)
						)  
					)
;
let adtbody1 = F2JADTNormalBody 
				(F2JNormalType "F2JType" (Nil[F2JType])) 
				(
					Cons[F2JADTAlternative] 
						(alternative1)
						(
							Cons[F2JADTAlternative]
							(alternative2)
							(
								Cons[F2JADTAlternative]
								(alternative3)
								(Nil[F2JADTAlternative])
							)
						)  
				)
;
let testF2JADTBody1 : TestFn = {
    name = "F2JADTBody  normal",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JADTBody adtbody1) )
    }
}
;

--Lambda \(a : A) -> 1
let f2jlambda= F2JLambda fbingdingparams (F2JStringLiteral "1")
;
let testF2JLambda : TestFn = {
    name = "F2JLambda",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jlambda) )
    }
}
;

--data F2JADTRecordItem = F2JADTRecordItem String F2JType
let recorditem1= F2JADTRecordItem "name" (F2JNormalType "Demonsu" (Nil[F2JType]))
;
let recorditem2= F2JADTRecordItem "age" (F2JNormalType "24" (Nil[F2JType]))
;
let recorditem3= F2JADTRecordItem "gender" (F2JNormalType "male" (Nil[F2JType]))
;
let adtbody2 = F2JADTRecordBody
				(F2JNormalType "F2JRecord" (Nil[F2JType]))
				(
					Cons[F2JADTRecordItem] 
						(recorditem1)
						(
							Cons[F2JADTRecordItem]
							(recorditem2)
							(
								Cons[F2JADTRecordItem]
								(recorditem3)
								(Nil[F2JADTRecordItem])
							)
						)  
				)	
;	
let testF2JADTBody2 : TestFn = {
    name = "F2JADTBody  record",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JADTBody adtbody2) )
    }
}
;

--data Maybe[A] = Nothing
--              | Just A
--;		
let maybe= Just[F2JType] f2jtype
;

let testMaybe : TestFn = {
    name = "Maybe",
    fn   = \(x : Unit) -> {
        println (showDoc (showMaybe[F2JType] showF2JType maybe) )
    }
}
;

--data rec
--    F2JBindingBody = F2JLetBindingBody     String PList[F2JType] PList[F2JBindingParam] Maybe[F2JType] F2JExpr
--                   | F2JLetRecBindingBody  String PList[F2JType] PList[F2JBindingParam] F2JType        F2JExpr
let maybenormal= Just[F2JType] f2jnormaltype
;
let f2jbingdingbody = F2JLetBindingBody "PrintWorld" f2jtypes fbingdingparams maybenormal (F2JVariable "test")
;
let testF2JLetBindingBody : TestFn = {
    name = "F2JLetBindingBody",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingBody f2jbingdingbody) )
    }
}
;
let f2jbingdingbodyrec = F2JLetRecBindingBody "PrintWorld" f2jtypes fbingdingparams f2jnormaltype (F2JVariable "test")
;
let testF2JLetBindingBodyRec : TestFn = {
    name = "F2JLetBindingBody rec",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JBindingBody f2jbingdingbodyrec) )
    }
}
;
--F2JCase               F2JExpr                  PList[F2JCaseAlternative]
--F2JCaseAlternative = F2JCaseAlternative String PList[String] F2JExpr
let casealternative1= F2JCaseAlternative "F2JNormalType" (Cons[String] "s" (Cons[String] "types" (Nil[String]))) (F2JVariable "s")
;
let casealternative2= F2JCaseAlternative "F2JFunctionType" (Cons[String] "type1" (Cons[String] "type2" (Nil[String]))) (F2JStringLiteral "showF2JType type1 <> showF2JType type2")
;
let casealternative3= F2JCaseAlternative "F2JPairedType" (Cons[String] "types" (Nil[String])) (F2JStringLiteral "showF2JTypes types")
;
let casealternatives= Cons[F2JCaseAlternative] casealternative1 (Cons[F2JCaseAlternative] casealternative2 (Cons[F2JCaseAlternative] casealternative3 (Nil[F2JCaseAlternative]) ))
;
let f2jexpr_f2jcase= F2JCase (F2JVariable "x") casealternatives
;
let testF2JExprF2JCase : TestFn = {
    name = "F2JExpr(F2JCase)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jcase) )
    }
}
;
--F2JExpr Full
--F2JBindingBody = F2JLetBindingBody     String PList[F2JType] PList[F2JBindingParam] Maybe[F2JType] F2JExpr
--F2JLet                PList[F2JBindingBody]    F2JExpr
let f2jnormaltype1 = F2JNormalType "F2JType" (Nil[F2JType])
;
let f2jnormaltype2 = F2JNormalType "Doc" (Nil[F2JType])
;
let maybenormal1= Just[F2JType] f2jnormaltype2
;
let f2jbindingbody2= F2JLetBindingBody "showF2JType" (Nil[F2JType]) (Cons[F2JBindingParam] (F2JBindingParam "x" f2jnormaltype1) (Nil[F2JBindingParam]) ) maybenormal1  f2jexpr_f2jcase
;
let f2jexpr_f2jfull= F2JADT (Cons[F2JADTBody] adtbody1 (Nil[F2JADTBody])) 
					(F2JLet (Cons[F2JBindingBody] f2jbindingbody2 (Nil[F2JBindingBody])) (F2JVariable "end"))
;
let testF2JExprFull : TestFn = {
    name = "F2JExpr(Full)",
    fn   = \(x : Unit) -> {
        println (showDoc (showF2JExpr f2jexpr_f2jfull) )
    }
}
;

let tests=	(testF2JExprFull			+>[TestFn]
			(testF2JExprF2JCase 		+>[TestFn]
			(testF2JLetBindingBodyRec 	+>[TestFn]
			(testF2JLetBindingBody 		+>[TestFn]
			(testMaybe 					+>[TestFn]
			(testF2JADTBody2 			+>[TestFn]
		 	(testF2JADTBody1 			+>[TestFn]
			(testF2JBindingParam 		+>[TestFn] 
			(testF2JLambda				+>[TestFn]
			(testF2JType 				+>[TestFn] 
			(Nil[TestFn])))))))))))
;
runTests tests


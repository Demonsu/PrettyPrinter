{-#
    INCLUDE "PrettyPrinterLib.sf"
    INCLUDE "PList.sf"
#-}

-- F2JType definition

data F2JType = F2JNormalType    String PList[F2JType]
             | F2JPairedType    PList[F2JType]
             | F2JFunctionType  F2JType F2JType
;

-- F2JType to Document

let rec showF2JType (ftype: F2JType): Doc=
	case ftype of
			F2JNormalType name params -> 
			{
				case params of
					Nil 			  -> text name
				|	Cons x xs		  -> text name <> text "[" <> showF2JTypes (x +> xs) <> text "]"
				
			}
		|	F2JPairedType types		  -> text "(" <> showF2JTypes types <> text ")"
		|	F2JFunctionType from to   -> showF2JType from <> text " -> " <> showF2JType to
and
showF2JTypes (ftypelist: PList[F2JType]): Doc =
	case ftypelist of
			Nil						  -> NIL
		|	Cons x xs				  -> 
			{
				case xs of
					Nil 			  -> showF2JType x
				|	Cons y ys 		  -> showF2JType y <> text "," <> showF2JTypes (y +> ys)
			}
;

-- Test


let f2jtype = F2JFunctionType (
								F2JPairedType (
												Cons[F2JType] (F2JNormalType "A" (Nil[F2JType])) (
																		Cons[F2JType] (F2JNormalType "B" (Nil[F2JType])) (Nil[F2JType])
																		)
											  )
							  ) 
			  				  (
			  				  	F2JNormalType "C" (Nil[F2JType])
			  				  )	  

;

showDoc (showF2JType f2jtype) 

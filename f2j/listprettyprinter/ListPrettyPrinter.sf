
data Doc = TXET String
		|  NEST Int Doc
		|  LINE
		|  NIL
		|  UNION Doc Doc
;

let (<+>) (a : Int) (b : Int) : Int =
	a + b;

data PList[A] = Nil
              | Cons A (PList[A])
;

let stringToString (a : String) : String = a;

let concat[A] (tostr: A-> String) (x: A) (y: String): String=
	(tostr x).concat(y)
;

let rec prettyList[A] (tostr: A-> String) (l: PList[A]): String =
	case l of 
			Nil 		-> ""
		|	Cons x xs	-> (concat[A] (tostr) x (prettyList[A] tostr xs))
;

let l = Cons[String] "1" (Cons[String] "2" (Cons[String] "3" (Nil[String])))
;
--prettyList[String] stringToString l

let (<>) (a : Doc) (b : Doc) : Doc =
	UNION a b;
--(TEXT "A") <> (TEXT "B")

let add (a : Int) (b : Int) : Int =
	a + b;

1 <+> 2

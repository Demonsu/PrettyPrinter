{-#
    INCLUDE "f2j_parser.sf"
    INCLUDE "PrettyPrintingLib3.sf"
    INCLUDE "F2JToDocument.sf"
#-}

-- let printFirstF2JParseResult (l : ParseOutput[F2JExpr]) =
--     let result =
--         case l of
--             Nil             -> "Empty result!"
--          |  Cons x _        -> showDoc (showF2JExpr (x._1))
--     ;

--     println result
-- ;

let getFirst (l : ParseOutput[F2JExpr]): F2JExpr  =

    case l of
        Nil             ->  F2JStringLiteral "Empty result!"
     |  Cons x _        ->  x._1

    --println result
;

{
    pretty 30 (showF2JExpr (getFirst (f2jProgram `parseString[F2JExpr]` "data PList[A] = Nil | Cons A (PList[A]); let rec recursive[A] (a : A) : A = recursive[A] a; recursive[Int] 1")))
    --printFirstF2JParseResult (f2jProgram `parseString[F2JExpr]` "data PList[A] = Nil | Cons A (PList[A]); let rec recursive[A] (a : A) : A = recursive[A] a; recursive[Int] 1")
}
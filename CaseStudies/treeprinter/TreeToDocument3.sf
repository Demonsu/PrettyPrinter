{-#
    INCLUDE "PrettyPrintingLib3.sf"
    INCLUDE "PList.sf"
#-}

-- utility functions

let bracket (l: String) (d: Doc) (r: String): Doc =
	group (text l <> (nest 2 (line <> d)) <> line <> text r)

;

data BTree = Node String PList[BTree];

-- tree to document

let rec showTree (tree: BTree): Doc=
	case tree of
			Node x xs	-> (text x) <> (showBracket xs)
and
showBracket (tree: PList[BTree]): Doc=
	case tree of
			Nil 		-> nil
		|	Cons x xs	-> bracket "[" (showTrees (x +>[BTree] xs)) "]"
and
showTrees (tree: PList[BTree]): Doc=
	case tree of
			Nil 		-> nil
		|	Cons x xs	-> 
		{
			case xs of
				Nil		-> (showTree x)
			|	Cons y ys	-> (showTree x) <> (text ",") <> (line) <> (showTrees (y +>[BTree] ys))
		}

;


let tree = Node "aaa" 
	(Cons[BTree] 
		(Node "bbbbb" (Nil[BTree])) 
		(Cons[BTree] (Node "eee" (Nil[BTree])) (Cons[BTree] (Node "ffff" (Nil[BTree])) (Nil[BTree]))))
;
let tree2 = Node "aaa"
	(Cons[BTree] (Node "bbb" (Cons[BTree] (Node "ee" (Nil[BTree])) (Cons[BTree] (Node "ff" (Nil[BTree])) (Nil[BTree]) ))) (Cons[BTree] (Node "cc" (Nil[BTree])) (Cons[BTree] (Node "dd" (Nil[BTree])) (Nil[BTree]))))
;
let tree3 = Node "aaa"
	(Cons[BTree] (Node "bbb" (Nil[BTree])) (Nil[BTree]))
;
{
println "Line Width 10:";

println (pretty 10 (showTree tree2));

println "Line Width 20:";

println (pretty 20 (showTree tree2));

println "Line Width 30:";

println (pretty 30 (showTree tree2))
}
--showDoc(showTree tree)
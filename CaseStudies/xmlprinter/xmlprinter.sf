
data Doc =	NIL
        |	TEXT String Doc
		|	LINE Int Doc
		|	UNION Doc Doc
;

let nil = NIL
;

let (<|>) (x: Doc) (y: Doc) : Doc =
	UNION x y
;


let text (s: String): Doc =
	TEXT s NIL
;

let line: Doc = 
	LINE 0 NIL
;

let rec (<>) (x: Doc) (y: Doc) : Doc =
	case x of
			UNION a b	-> (a <> y) <|> (b <> y)
		|	TEXT s d 	-> TEXT s (d <> y)
		|	LINE i e	-> LINE i (e <> y)		
		|	NIL 		-> y
;

let rec nest (i: Int) (x: Doc): Doc =
	case x of
			UNION a b	-> (nest i a) <|> (nest i b)
		|	TEXT s d 	-> TEXT s (nest i d)
		|	LINE j c 	-> LINE (i+j) (nest i c)
		|	NIL 		-> NIL
;


let rec flatten (d: Doc): Doc =
	case d of
			NIL 			-> NIL
		|	LINE i x 		-> TEXT " " (flatten x)
		|	TEXT s x		-> TEXT s (flatten x)
		|	UNION x y		-> flatten x
;


let rec group (d: Doc): Doc =
	flatten d <|> d
;


let rec fits (w: Int) (d: Doc): Bool=
	if w < 0 then False
	else 
		case d of
				NIL 			-> True
			|	TEXT s x 		-> fits (w - s.length()) x
			|	LINE i x 		-> True
			|	UNION _  _		-> False
;


let better (w: Int) (k: Int) (x: Doc) (y: Doc): Doc =
	if fits (w - k) x then x
	else  y
;


let rec best (w: Int) (k: Int) (d: Doc): Doc =
	case d of
			NIL 			-> NIL
		|	LINE i x 		-> LINE i (best w k x)
		|	TEXT s x 		-> TEXT s (best w (k + s.length()) x)
		|	UNION x y 		-> better w k (best w k x) (best w k y)
;


let concat (x : String) (y : String): String= 
	x.concat(y)
;

let rec space (i: Int): String=
	if i==0 then
				""
			 else
			 	" ".concat(space (i-1))
;

let rec showDoc(doc: Doc): String=
	case doc of
			TEXT s x	-> concat s (showDoc x)
		|	LINE i d 	-> concat (concat "\n" (space i)) (showDoc d)
		| 	NIL			-> ""
		|	UNION x y 	-> "IMPOSSIBLE"
;

let pretty (w: Int) (d: Doc): String =
	showDoc (best w 0 d)
;


data PList[A] = Nil
              | Cons A (PList[A])
;

let (+>)[A] (a: A)(l: PList[A]): PList[A]=
	Cons[A] a l
;


data XMLNode = XMLText      String
             | XMLAttr      String String
             | XMLElement   String PList[XMLNode] PList[XMLNode]
             | XMLCData		String
             | XMLComment	String
             | XMLProcInst	String PList[XMLNode]
;


let quoted (s: String): String=
	"\"".concat(s.concat("\""))
;
let rec showXML (xml: XMLNode): Doc=
	case xml of
			XMLText s 						-> text s
		|	XMLCData s 						-> text "<![CDATA[" <> text s <> text "]]>"
		|	XMLComment s					-> text "<--" <> text s <> text "-->"
		|	XMLProcInst s x					-> text "<?" <> text s <>showATTs x <> text "?>" 
		|	XMLAttr x y 					-> text " " <> text x <> text "=" <> text (quoted y) 
		|	XMLElement s x y				-> text "<" <> text s <> showATTs x <> text ">" <>
												(nest 2 (line <> showXMLs y)) <>
												line <> text "</" <> text s <> text ">"
and
showATTs (xmls: PList[XMLNode]): Doc=
	case xmls of
			Nil								-> NIL
		|	Cons x xs 						-> showXML x <> showXMLs xs	 
and
showXMLs (xmls: PList[XMLNode]): Doc=
	case xmls of
			Nil								-> NIL
		|	Cons x xs 						-> 
		{
			case xs of
					Nil 						-> showXML x
				|	Cons y ys					-> showXML x <> line <> showXMLs (y +> ys)
		}
;



let xml= 	Cons[XMLNode]
			(XMLProcInst "xml" 
			 (
			 	Cons[XMLNode] (XMLAttr "version" "1.0") (Cons[XMLNode] (XMLAttr "encoding" "UTF-8") (Nil[XMLNode]))
			 )
			) 
			(Cons[XMLNode]
			(	XMLElement "p" 
				(Cons[XMLNode] (XMLAttr "color" "red") (Cons[XMLNode] (XMLAttr "name" "xiafan") (Nil[XMLNode]))) 
				(Cons[XMLNode] (XMLElement "h1" (Cons[XMLNode] (XMLAttr "defalt" "true") (Nil[XMLNode])) (Cons[XMLNode] (XMLText "Small Step") (Cons[XMLNode] (XMLCData "<function> text </function>") (Nil[XMLNode])))) (Cons[XMLNode] (XMLComment "this should be ignored") (Nil[XMLNode])))
			)
			(
				Nil[XMLNode]
			))
;
showDoc (showXMLs xml)
{-#

    INCLUDE "fj_parser.sf"
    INCLUDE "testfx.sf"
    INCLUDE "PrettyPrintingLib2.sf"
    INCLUDE "FJToDocument.sf"
#-}
let dissectElton (res : ParseOutput[FJExpr]) : FJExpr =
    case res of
            Nil         -> error[FJExpr] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJVariableDef (res : ParseOutput[FJVariableDef]) : FJVariableDef =
    case res of
            Nil         -> error[FJVariableDef] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJFieldDef (res : ParseOutput[FJFieldDef]) : FJFieldDef =
    case res of
            Nil         -> error[FJFieldDef] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJStmt (res : ParseOutput[FJStmt]) : FJStmt =
    case res of
            Nil         -> error[FJStmt] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJMethod (res : ParseOutput[FJMethod]) : FJMethod =
    case res of
            Nil         -> error[FJMethod] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJClass (res : ParseOutput[FJClass]) : FJClass =
    case res of
            Nil         -> error[FJClass] "It must be Elton"
        |   Cons x _    -> x._1
;
let dissectFJClasses (res : ParseOutput[PList[FJClass]]) : PList[FJClass] =
    case res of
            Nil         -> error[PList[FJClass]] "It must be Elton"
        |   Cons x _    -> x._1
;
{

    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "a"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "a.b"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "a.b()"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "new A()"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "(A) a"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "42"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "(42)"))));
    println (pretty 20 (showFJExpr (dissectElton (fjExpr `parseString[FJExpr]` "((42))"))));

    println (pretty 20 (showFJVariableDef (dissectFJVariableDef (fjVariableDef `parseString[FJVariableDef]` "int a, b = 1;"))));
    println (pretty 20 (showFJFieldDef (dissectFJFieldDef (fjFieldDef `parseString[FJFieldDef]` "int b = 1;"))));

    println (pretty 20 (showFJStmt (dissectFJStmt (fjStmt `parseString[FJStmt]` "int b = 1;"))));
    println (pretty 20 (showFJStmt (dissectFJStmt (fjStmt `parseString[FJStmt]` "b;"))));
    println (pretty 20 (showFJStmt (dissectFJStmt (fjStmt `parseString[FJStmt]` "{ int a = 1; b; }"))));
    println (pretty 20 (showFJStmt (dissectFJStmt (fjStmt `parseString[FJStmt]` "fuck(you, 1);"))));

    println (pretty 200 (showFJMethod (dissectFJMethod (fjMethod `parseString[FJMethod]` "void hello(int a) { }"))));
    println (pretty 200 (showFJMethod (dissectFJMethod (fjMethod `parseString[FJMethod]` "void hello(int a = 1) { }"))));
    println (pretty 200 (showFJMethod (dissectFJMethod (fjMethod `parseString[FJMethod]` "int hello(int a) { return a; }"))));
    println (pretty 200 (showFJMethod (dissectFJMethod (fjMethod `parseString[FJMethod]` "Hello(int a, int b) { }"))));

    println (pretty 20 (showFJClass (dissectFJClass (fjClass `parseString[FJClass]` "class A {}"))));
    println (pretty 20 (showFJClass (dissectFJClass (fjClass `parseString[FJClass]` "class A extends B {}"))));
    println (pretty 20 (showFJClass (dissectFJClass (fjClass `parseString[FJClass]` "class A extends B { int a; }"))));
    println (pretty 20 (showFJClass (dissectFJClass (fjClass `parseString[FJClass]` "class A extends B { int a; A() { super(); } }"))));
    println (pretty 20 (showFJClass (dissectFJClass (fjClass `parseString[FJClass]` "class A extends B { int a; A() { super(); } void kill(int you) {}}"))));

    println (pretty 20 (showFJClasses
             (dissectFJClasses (fjParse
                    `parseString[PList[FJClass]]`
                "class A extends B { int a; A() { super(); } void kill(int you) { this.a; }} class B { int b = 1; }"))));
    ()
}
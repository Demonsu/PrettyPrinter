
let rec showFJComment (cm : FJComment) : Doc =
    case cm of
        FJLineComment c     -> text "//" <> text c
     |  FJBlockComment c    -> text "/*" <> line <> text c <> line <> text "*/"
;



let showFJType (f : FJType) : Doc =
	case f of
		FJType s 		-> text s
;



let rec showFJExpr (fjexpr : FJExpr) : Doc =
	case fjexpr of
			FJVariable i 				-> text i
		| 	FJFieldAccess expr i 		-> showFJExpr expr <> text "." <> text i
		| 	FJMethodInvoke expr i exprs -> showFJExpr expr <> text "." <> text i <> text "(" <> (showFJExprs exprs ",") <> text ")"
		| 	FJSelfMethodInvoke i exprs 	-> text i <> text "(" <> (showFJExprs exprs ",") <> text ")"
		| 	FJAllocate	t exprs 		-> text "new " <> showFJType t <> text "(" <> (showFJExprs exprs ",") <> text ")"
		|	FJTypeCast t expr 			-> text "(" <> showFJType t <> text ")" <> showFJExpr expr
		| 	FJIntLiteral s 				-> text s
		|	FJBracketSurroundedExpr e 	-> text "(" <> showFJExpr e <> text ")"
and showFJExprs (fjexprs : PList[FJExpr]) (decollator: String) : Doc =
	case fjexprs of
			Nil							-> NIL 
		| 	Cons x xs					->
			{
				if isempty[FJExpr] (invoke[PList[FJExpr]] xs) then 
				showFJExpr x
				else 
				showFJExpr x <> text decollator <> text " " <> (showFJExprs (invoke[PList[FJExpr]] xs) decollator)
			}
;


let rec showDef (d : (FJIdentifier, Maybe[FJExpr])) : Doc =
	case d._2 of
			Nothing						-> text d._1
		|	Just x 						-> text d._1 <> text " = " <> showFJExpr x
and
showDefs (defs : PList[(FJIdentifier, Maybe[FJExpr])]) : Doc =
	case defs of
			Nil 						-> NIL
		|	Cons x xs 					-> 
			{
				if isempty[(FJIdentifier, Maybe[FJExpr])] (invoke[PList[(FJIdentifier, Maybe[FJExpr])]] xs) then 
				showDef x
				else
				showDef x <> text ", " <> showDefs (invoke[PList[(FJIdentifier, Maybe[FJExpr])]] xs)
			}
;

let showFJVariableDef (vd : FJVariableDef) : Doc =
	case vd of
			FJVariableDef t defs 		-> showFJType t <> text " " <> showDefs defs
;



let showFJFieldDef (fd : FJFieldDef) : Doc =
	case fd of
			FJFieldDef t defs 			-> showFJType t <> text " " <> showDefs defs
;



let rec showFJStmt (stmt : FJStmt) : Doc =
	case stmt of
			FJStmtVariableDef vd 		-> showFJVariableDef vd <> text ";"
		|	FJStmtExpr expr 			-> showFJExpr expr <> text ";"
		|	FJStmtBlock	stmts 			-> text "{" <> nest 2 (line <> showFJStmts stmts) <> line <> text "}"
		| 	FJStmtReturn expr 			-> text "return " <> showFJExpr expr <> text ";"
and showFJStmts (stmts : PList[FJStmt]) : Doc =
	case stmts of
			Nil 						-> NIL
		| 	Cons x xs 					-> 
			{
				if isempty[FJStmt] (invoke[PList[FJStmt]] xs) then 
				showFJStmt x
				else
				showFJStmt x <> line <> showFJStmts (invoke[PList[FJStmt]] xs)
			}
;

--                                       int    a            = 1


let rec showFJMethodParamDef (mpd : FJMethodParamDef) : Doc =
	case mpd of
			FJMethodParamDef t i m 		-> 
			{
				case m of 
					Nothing				-> showFJType t <> text " " <> text i
				| 	Just x 				-> showFJType t <> text " " <> text i <> text " = " <> showFJExpr x
			}
and
showFJMethodParamDefs (mpds : PList[FJMethodParamDef]) : Doc =
	case mpds of
			Nil 						-> NIL
		|	Cons x xs 					->
			{
				if isempty[FJMethodParamDef] (invoke[PList[FJMethodParamDef]] xs) then 
				showFJMethodParamDef x 
				else
				showFJMethodParamDef x <> text ", " <> showFJMethodParamDefs (invoke[PList[FJMethodParamDef]] xs)
			}
;

let showFJMethod (m : FJMethod) : Doc =
	case m of 
			FJConstructor name params stmts 		-> group (text name <> text "(" <> showFJMethodParamDefs params <> text ") " <> line <> text "{" <> nest 2 (line <> showFJStmts stmts) <> line <> text "}")
		| 	FJNormalMethod name params rtype stmts  -> group (showFJType rtype <> text " " <> text name <> text "(" <> showFJMethodParamDefs params <> text ") " <> line <> text "{" <> nest 2 (line <> showFJStmts stmts) <> line <> text "}")
;



let rec showFJClassBodyContent (fbc : FJClassBodyContent) : Doc =
	case fbc of 
			FJClassMethod m 			-> showFJMethod m
		|	FJClassField f 				-> showFJFieldDef f <> text ";"
		| 	FJInnerClass c 				-> showFJClass c
and
showFJClassBodyContents (fbcs : PList[FJClassBodyContent]) : Doc =
	case fbcs of
			Nil 						-> NIL
		|	Cons x xs 					->
			{
				if isempty[FJClassBodyContent] (invoke[PList[FJClassBodyContent]] xs) then 
				showFJClassBodyContent x 
				else
				showFJClassBodyContent x <> line <> showFJClassBodyContents (invoke[PList[FJClassBodyContent]] xs)
			}

and
showFJClass (class : FJClass) : Doc =
	case class of 
			FJClass t mt bodys 			->
			{
				case mt of 
					Nothing				-> group (text "Class " <> showFJType t <> text " " <> line <> text "{" <> nest 2 (line <> showFJClassBodyContents bodys) <> line <> text "}")
				|	Just x 				-> group (text "Class " <> showFJType t <> text " extends " <> showFJType x <> text " " <> line <> text "{" <> nest 2 (line <> showFJClassBodyContents bodys) <> line <> text "}")
			}
and
showFJClasses (classes : PList[FJClass]) : Doc =
	case classes of 
			Nil 		-> NIL
		|	Cons x xs 	-> showFJClass x <> line <> showFJClasses (invoke[PList[FJClass]] xs)
;

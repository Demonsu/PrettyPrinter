


let rec braketExpr (expr: ArithExpr): Doc =

	(text "(") <> (showArithExpr expr) <> (text ")")

and

isAddSub (expr: ArithExpr): Doc =

	case expr of
			Add _ _ 	->	braketExpr expr
		|	Sub _ _ 	->	braketExpr expr
		|	_			->	showArithExpr expr

and

showArithExpr (expr: ArithExpr): Doc =
	case expr of
			Add	e1 e2		-> (showArithExpr e1) <> (text " + ") <> (showArithExpr e2)
		|	Sub e1 e2		-> (showArithExpr e1) <> (text " - ") <> (showArithExpr e2)
		|	Mul e1 e2		-> (isAddSub e1) 	  <> (text " * ") <> (isAddSub e2)
		|	Div e1 e2		-> (isAddSub e1) 	  <> (text " / ") <> (isAddSub e2)
		|	Integer x 		-> text x.toString() 
;


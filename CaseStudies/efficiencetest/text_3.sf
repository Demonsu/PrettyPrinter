
data Doc =	NIL
        |	TEXT String
		|	LINE
		|	NEST Int Doc
		|	UNION Doc Doc
		|   CONCAT Doc Doc
;


data DList[A] = DNil
              | Cons A (DList[A])
;

let (++>)[A] (a: A) (l: DList[A]): DList[A] =
	Cons[A] a l
;


data PDoc = NI
		|	TE String PDoc
		|	LI Int PDoc
;

type Pair = (Int, Doc)
;

let nil = NIL
;

let (<|>) (x: Doc) (y: Doc) : Doc =
	UNION x y
;


let text (s: String): Doc =
	TEXT s
;

let line: Doc = 
	LINE
;

let (<>) (x: Doc) (y: Doc) : Doc =
	CONCAT x y
;

let nest (i: Int) (x: Doc): Doc =
	NEST i x
;


let rec flatten (d: Doc): Doc =
	case d of
			NIL 			-> NIL
		|	LINE 			-> TEXT " "
		|	TEXT s 			-> TEXT s 
		|	NEST i x 		-> NEST i (flatten x)
		|	UNION x y		-> flatten x
		|	CONCAT x y 		-> (flatten x) <> (flatten y)
;


let rec group (d: Doc): Doc =
	(flatten d) <|> d
;


let rec fits (w: Int) (d: PDoc): Bool=
	if w < 0 then False
	else 
		case d of
				NI 				-> True
			|	TE s x  		-> fits (w - s.length()) x
			|	LI i x 	  		-> True
;


let better (w: Int) (k: Int) (x: PDoc) (y: PDoc): PDoc =
	if fits (w - k) x then x
	else  y
;



let rec be (w: Int) (k: Int) (docs: DList[Pair]): PDoc =
	case docs of
			DNil 					-> NI
		|	Cons x xs				->
			{
				case x._2 of
					NIL 			-> be w k xs
				|	CONCAT d1 d2	-> be w k (Cons[Pair] (x._1, d1) (Cons[Pair] (x._1, d2) xs))                       
				|	NEST j d		-> be w k (Cons[Pair] (j + x._1, d)  xs)
				|   TEXT s 			-> TE s (be w k xs)
				| 	LINE 			-> LI x._1 (be w k xs)
				|	UNION d1 d2 	-> better w k (be w k (Cons[Pair] (x._1, d1) xs)) (be w k (Cons[Pair] (x._1, d2) xs))

			}


;


let best (w: Int) (k: Int) (d: Doc): PDoc =
	be w k (Cons[Pair] (0, d) (DNil[Pair]))
;

let concat (x : String) (y : String): String= 
	x.concat(y)
;

let rec space (i: Int): String=
	if i==0 then
				""
			 else
			 	" ".concat(space (i-1))
;

let rec showDoc(doc: PDoc): String=
	case doc of
			TE s x	-> concat s (showDoc x)
		|	LI i d 	-> concat (concat "\n" (space i)) (showDoc d)
		| 	NI			-> ""
;

let pretty (w: Int) (d: Doc): String =
	showDoc (best w 0 d)
;

let doc = UNION (TEXT "hello") (TEXT "world")
;



let rec looptext (x: Int) : Doc =
	if x > 0 then
		(looptext (x-1)) <> (text "1") 
	else
		NIL
;


pretty 30 (looptext 300)

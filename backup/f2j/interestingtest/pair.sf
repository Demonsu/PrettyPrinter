-- data Doc= NIL
-- 		| TEXT String Doc
-- 		| LINE Doc
-- ;

-- let concat (x : String) (y : String): String= 
-- 	x.concat(y)
-- ;

-- let pairDoc (i : Int) (x : Doc) : (Int, Doc)
-- 	(i, x)
-- ; 

-- let showI (i: Int): String
-- 	if i > 0 then
-- 		concat "!" (showI (i-1))
-- 	else
-- 		""
-- ;

-- let showPairedDoc (x: (Int, Doc)): String
-- 	case x of 
-- 			(i, NIL)		-> showI i
-- 		|	(i, TEXT s x)	-> concat s (showPairedDoc (i, x))
-- 		|	(i, LINE x)		-> concat "\n" (showPairedDoc (i, x))
-- ;

-- let doc = TEXT "I am a" (LINE (TEXT "Doc" NIL))
-- ;

-- showPairedDoc (pairDoc 3 doc)

-- let pair (x: Int) (y: String): (Int, String)
-- 	(x, y)
-- ;



let showPair (x: (Int, String)) : Int=
	2
;

showPair (1,"2")